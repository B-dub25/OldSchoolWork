package graphing;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.FontMetrics;
import java.awt.Graphics;
import java.awt.Insets;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.Scanner;

import javax.swing.*;

@SuppressWarnings("serial")
public class GraphBeginnings extends JFrame {

	ArrayList<GBar> gbarArr = new ArrayList<GBar>();
    String title = null;
    
	GraphBeginnings(ArrayList<GBar> garr) {
		
		super("Graph Beginnings");
        
		sort(garr);
		gbarArr = garr;
		setSize(600, 600);		
		setVisible(true);
		setDefaultCloseOperation(EXIT_ON_CLOSE);
	}

	int getMaxTextWidth(ArrayList<GBar> garr, FontMetrics fm) {
		int maxValue = 0;
		for (int i = 0; i < garr.size(); i++) {
			int width = fm.stringWidth(garr.get(i).text);
			if (width > maxValue)
				maxValue = width;
		}
		return maxValue;
	}

	int getMaxBarWidth(ArrayList<GBar> garr) {
		int maxValue = 0;
		for (int i = 0; i < garr.size(); i++) {
			int value = garr.get(i).value;
			if (value > maxValue)
				maxValue = value;
		}
		return maxValue;
	}
	
    public void sort(ArrayList<GBar> garr){
		
    	GBar tempBar ;
        
    	int larget , outer , inner;
    	for (outer = 0; outer < garr.size(); outer++){
			   larget = outer;
		   for (inner = 1+outer; inner < garr.size(); inner++) {
			    if ( garr.get(inner).value > garr.get(outer).value){
					 larget = inner;
				}
		  }
          if(larget != outer){
	      tempBar = garr.get(larget);
	      garr.set(larget, garr.get(outer)); 
	      garr.set(outer, tempBar);
    	 }
	   }
    	
	}
    
	public void paint(Graphics g) {
		
		super.paint(g);
		Dimension dimen = getSize();
		Insets insets = getInsets();
        int top = insets.top;
		int left = insets.left;
		int right = insets.right;
		int pixelWidth = 10;
		Font font = g.getFont();
		FontMetrics fm = getFontMetrics(font);
		int fontHeight = fm.getHeight();
		int strMaxWidth = left + getMaxTextWidth(gbarArr, fm);
		int x_bar_start = strMaxWidth + 1;
		int barMaxValue = getMaxBarWidth(gbarArr);
		double scale = (dimen.width - x_bar_start - right)
				/ (double) barMaxValue;
		int y_start = top;
		int bar_height = fontHeight;
		
		g.setColor(Color.GREEN);
		g.drawLine(110, getHeight()-pixelWidth, 110, 0);
		g.setColor(Color.RED);
		g.fillRect(0,top, getWidth(), pixelWidth);
		g.fillRect(getHeight()-pixelWidth,0, pixelWidth,getHeight());
		g.fillRect(0,0,pixelWidth,getWidth());
		g.fillRect(0,getWidth()-pixelWidth,getWidth(),pixelWidth);
		
		for (int i = 0; i < gbarArr.size(); i++) {
			g.setColor(Color.gray);
			String text = gbarArr.get(i).text;
			int strWidth = fm.stringWidth(text);
			int value = gbarArr.get(i).value;
			int scaledValue = (int) (value * scale);
			g.drawString(text, pixelWidth+strMaxWidth - strWidth, y_start + pixelWidth*5 );
			g.setColor(Color.GREEN);
			g.fillRect(x_bar_start+10, y_start+pixelWidth*4, scaledValue-pixelWidth*3+5, bar_height);  
			y_start += fontHeight + 15 ;
		}		
	}
	
  private void getFileInfo(InputStream inputSource) {
		
		Scanner infileScanner = new Scanner(inputSource);
		title = infileScanner.nextLine();
		GBar tempBar;
		
		while (infileScanner.hasNext()) {
			String name = (String) infileScanner.next();
			int score = (int) infileScanner.nextInt();
			tempBar = new GBar(name.substring(0,name.charAt(';')), score);
			gbarArr.add(tempBar);
		}
		
	    infileScanner.close();
	}

	public static void main(String[] args) {
		ArrayList<GBar> garr = new ArrayList<GBar>();
		garr.add(new GBar("Bubba", 320));
		garr.add(new GBar("Adrian Petersen", 235));
		garr.add(new GBar("Sproules", 165));
		garr.add(new GBar("RG3", 212));
        @SuppressWarnings("unused")
		GraphBeginnings gb = new GraphBeginnings(garr);

	}

}
