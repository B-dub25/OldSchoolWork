package graphing;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.FontMetrics;
import java.awt.Graphics;
import java.awt.Insets;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.Scanner;

import javax.swing.JFrame;

@SuppressWarnings("serial")
public class GraphBeginnings extends JFrame {

	ArrayList<GBar> gbarArr = new ArrayList<GBar>();
	String title = null;

	GraphBeginnings(String file) {
        
		
		try{

		getFileInfo(new FileInputStream (new File(file)));	
		setTitle(title);
		sort();
		
		setSize(600, 600);
		setVisible(true);
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		
		}catch(FileNotFoundException e){
			
		}
	}

  int getMaxTextWidth(ArrayList<GBar> garr, FontMetrics fm) {
		int maxValue = 0;
		for (int i = 0; i < garr.size(); i++) {
			int width = fm.stringWidth(garr.get(i).text);
			if (width > maxValue)
				maxValue = width;
		}
		return maxValue;
	}

	int getMaxBarWidth(ArrayList<GBar> garr) {
		int maxValue = 0;
		for (int i = 0; i < garr.size(); i++) {
			int value = garr.get(i).value;
			if (value > maxValue)
				maxValue = value;
		}
		return maxValue;
	}

	public void sort() {

		GBar tempBar;

		int larget, outer, inner;
		for (outer = 0; outer < gbarArr.size(); outer++) {
			larget = outer;
			for (inner = 1 + outer; inner < gbarArr.size(); inner++) {
				if (gbarArr.get(inner).value > gbarArr.get(outer).value) {
					larget = inner;
				}
			}
			if (larget != outer) {
				tempBar = gbarArr.get(larget);
				gbarArr.set(larget, gbarArr.get(outer));
				gbarArr.set(outer, tempBar);
			}
		}

	}

	public void paint(Graphics g) {

		super.paint(g);
		Dimension dimen = getSize();
		Insets insets = getInsets();
		int top = insets.top;
		int left = insets.left;
		int right = insets.right;
		int pixelWidth = 10;
		Font font = g.getFont();
		FontMetrics fm = getFontMetrics(font);
		int fontHeight = fm.getHeight();
		int strMaxWidth = left + getMaxTextWidth(gbarArr, fm);
		int x_bar_start = strMaxWidth + 1;
		int barMaxValue = getMaxBarWidth(gbarArr);
		double scale = (dimen.width - x_bar_start - right)
				/ (double) barMaxValue;
		int y_start = top;
		int bar_height = fontHeight;
		g.setColor(Color.GREEN);
		g.drawLine(strMaxWidth-pixelWidth, getHeight() , strMaxWidth-pixelWidth, 0);
		g.setColor(Color.RED);
		g.fillRect(right, top, getWidth(), pixelWidth);
		g.fillRect(getHeight() - pixelWidth, right, pixelWidth, getHeight());
		g.fillRect(right, top, pixelWidth, getWidth());
		g.fillRect(left, getWidth() - pixelWidth, getWidth(), pixelWidth);


		for (int i = 0; i < gbarArr.size(); i++) {
			g.setColor(Color.gray);
			String text = gbarArr.get(i).text;
			int strWidth = fm.stringWidth(text);
			int value = gbarArr.get(i).value;
			int scaledValue = (int) (value * scale);
			g.drawString(text,  strMaxWidth - strWidth, y_start);
			g.setColor(Color.GREEN);
			g.fillRect(x_bar_start-pixelWidth , y_start , scaledValue
					, bar_height);
			y_start += fontHeight + 15;
		}
	}

	private void getFileInfo(InputStream inputSource) {

		Scanner infileScanner = new Scanner(inputSource);
		title = infileScanner.nextLine();
		GBar tempBar;

		while (infileScanner.hasNext()) {
			String name = (String) infileScanner.nextLine();
			int score = Integer.parseInt(name.substring(name.indexOf(";")+1).trim());
			tempBar = new GBar(name, score);
			gbarArr.add(tempBar);
		}

		infileScanner.close();
	}

	public static void main(String[] args) {

		GraphBeginnings gb = new GraphBeginnings(args[0]);

	}

}
