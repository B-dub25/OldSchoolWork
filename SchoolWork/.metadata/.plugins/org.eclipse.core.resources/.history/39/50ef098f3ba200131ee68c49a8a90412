/**
 * Created by brundel on 2/26/14.
 * Project name := COSCMP2
 */
public class DataStructure  {

    public static final int MAX = 100;
    private Stack<Integer> stack;
    private LinkedList<String,Integer> studentId;
    private LinkedList<String,Integer> studentFirstName;
    private LinkedList<String,Integer> studentLastName;
    private DataStructureRecord[] records;
    private int indexPointer;

    public DataStructure(){

        initializeRecords();
        stack = new Stack<Integer>();
        studentId = new LinkedList<String, Integer>();
        studentLastName = new LinkedList<String, Integer>();
        studentFirstName = new LinkedList<String, Integer>();
    }

    public void insert(String fName, String lName, String id){

        if(!stack.isEmpty()){
            int position = stack.pop();
            studentId.insert(id,position);
            studentLastName.insert(fName,position);
            studentFirstName.insert(lName,position);
            records[position].set(fName,lName,id);
        }
        else {
            studentId.insert(id,indexPointer);
            studentLastName.insert(fName,indexPointer);
            studentFirstName.insert(lName,indexPointer);
            records[indexPointer].set(fName, lName, id);
            ++indexPointer;
          
        }
   }

    public boolean deleteIt(String id) {

        int position = studentId.findItem(id);
        if(position >= 0){
            studentId.delete(position);
            studentLastName.delete(position);
            studentFirstName.delete(position);
            stack.push(position);
        }
        return (position >= 0);
    }

    public int search(String id) {

        int position = -1;
        if(studentId.findItem(id) != null);
           position = studentId.findItem(id);
        return ((position >=0 ) ? position : -1);

    }

    public void listIt(int field, int option) {

        if(field == 1)
            listFName(option);
        else if(field == 2)
            listLName(option);
        else
            listID(option);
    }

    public String getRecord(int position) {

        return records[position].toString();
    }

    private void initializeRecords(){
        records = new DataStructureRecord[MAX];
        for(int i = 0 ; i < MAX; ++i)
            records[i] = new DataStructureRecord();
    }

    private void listID(int option){

        if(option == 1){
            for(int index = 0; index < studentId.getSize()-1; ++index){
                int position = studentId.getItem(index);
                System.out.println(records[position]);
            }
        }
        else
            for(int index = studentId.getSize()-1; index > 0; --index){
                int position = studentId.getItem(index);
                System.out.println(records[position]);
            }
    }
    private void listFName(int option){

    	studentFirstName.print();
        if(option == 1){
            for(int index = 1; index < studentFirstName.getSize()-1; ++index){
                int position = studentFirstName.getItem(index);
                   if(position > 0)
                     System.out.println(records[position]);
            }
        }
        else
            for(int index = studentFirstName.getSize()-1; index > 0; --index){
                int position = studentFirstName.getItem(index);
                System.out.println(records[position]);
            }
    }
    private void listLName(int option){

        if(option == 1){
            for(int index = 1; index < studentLastName.getSize()-1; ++index){
                int position = studentLastName.getItem(index);
                System.out.println(records[position]);
            }
        }
        else
            for(int index = studentLastName.getSize()-1; index > 0; --index){
                int position = studentLastName.getItem(index);
                System.out.println(records[position]);
            }
    }

    // inner class
    private class DataStructureRecord{

        private	String id;
        private	String lastName;
        private	String firstName;

        /**
         * Default constructor to initialize the strings variable to null string
         */
        private DataStructureRecord(){

            id = "";
            lastName = "";
            firstName = "";
        }
        /**
         * This method is to set the given data	for the outer class.
         * Even though we can call the variables from the outer class
         * this routine makes for much easier and cleaner code.
         * @param fName the first name of the student
         * @param lName the last name of the student
         * @param studentID the id of the student
         */
        private void set(String fName, String lName, String studentID){

            firstName = fName;
            lastName  = lName;
            id        = studentID;
        }

        @Override
        public String toString(){
            return (id + "\t" + firstName + "\t" + lastName + "\t");
        }
    }


}