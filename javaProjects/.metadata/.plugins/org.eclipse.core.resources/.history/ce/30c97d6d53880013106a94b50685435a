import java.util.Arrays;



public class Stack<E extends Comparable<E> > implements Maxium{

	private Comparable<E>[] stack;
	private int stackPointer;
	private int size;
	
	@SuppressWarnings("unchecked")
	public Stack() {

		size  = 0;
		stack = new Comparable[MAX];
		stackPointer = 0;
	    stack = (E[])Arrays.copyOf(stack, MAX , Comparable[].class);
	}
	
	public void push(E element) {
		
		stack[stackPointer++] = element;
		++size;
		
	}
	
	@SuppressWarnings("unchecked")
	public E pop() {
		final E tempE = (E)stack[--stackPointer];
		return tempE ;
	}
	
	
	public boolean search(E target){
		
        int first = 0, last = stackPointer-1 , mid = 0;		
		
        while(first <= last){
        	
        	mid = (first + last) / 2;
        	
        	if(stack[mid].compareTo(target) == 0)
        		return true;
        	else if(stack[mid].compareTo(target) < 0)
        		   first = mid +1;
        	else
        		last = mid -1;
        }
		return false;
	}
}
